C Sharp



C# (произносится си шарп) — объектно-ориентированный язык программирования. Разработан в 1998—2001 годах группой инженеров под руководством Андерса Хейлсберга в компании Microsoft как язык разработки приложений для платформы Microsoft .NET Framework и впоследствии был стандартизирован как ECMA-334 и ISO/IEC 23270.

C# относится к семье языков с C-подобным синтаксисом, из них его синтаксис наиболее близок к C++ и Java. Язык имеет статическую типизацию, поддерживает полиморфизм, перегрузку операторов (в том числе операторов явного и неявного приведения типа), делегаты, атрибуты, события, свойства, обобщённые типы и методы, итераторы, анонимные функции с поддержкой замыканий, LINQ, исключения, комментарии в формате XML.

Переняв многое от своих предшественников — языков C++, Pascal, Модула, Smalltalk и, в особенности, Java — С#, опираясь на практику их использования, исключает некоторые модели, зарекомендовавшие себя как проблематичные при разработке программных систем, например, C# в отличие от C++ не поддерживает множественное наследование классов (между тем допускается множественное наследование интерфейсов).

Особенности языка

C# разрабатывался как язык программирования прикладного уровня для CLR и, как таковой, зависит, прежде всего, от возможностей самой CLR. Это касается, прежде всего, системы типов C#, которая отражает BCL. Присутствие или отсутствие тех или иных выразительных особенностей языка диктуется тем, может ли конкретная языковая особенность быть транслирована в соответствующие конструкции CLR. Так, с развитием CLR от версии 1.1 к 2.0 значительно обогатился и сам C#; подобного взаимодействия следует ожидать и в дальнейшем (однако, эта закономерность была нарушена с выходом C# 3.0, представляющего собой расширения языка, не опирающиеся на расширения платформы .NET). CLR предоставляет C#, как и всем другим .NET-ориентированным языкам, многие возможности, которых лишены «классические» языки программирования. Например, Сборка мусора не реализована в самом C#, а производится CLR для программ, написанных на C# точно так же, как это делается для программ на VB.NET, J# и др.

Название языка

Название «Си шарп» (от англ. sharp — диез) происходит от музыкальной нотации, где знак диез означает повышение соответствующего ноте звука на полутон, что аналогично названию языка C++, где «++» обозначает инкремент переменной. Название также является игрой с цепочкой , так как символ «#» можно составить из 4х знаков «+».

Вследствие технических ограничений на отображение (стандартные шрифты, браузеры и т. д.) и того обстоятельства, что знак диез ♯ не представлен на стандартной клавиатуре, знак номера # был выбран для представления знака диез при записи имени языка программирования. Это соглашение отражено в Спецификации Языка C# ECMA-334. Тем не менее, на практике (например, при размещении рекламы и коробочном дизайне), Майкрософт использует предназначенный музыкальный знак.

Названия языков программирования не принято переводить, поэтому язык следует называть по-английски «Си шарп».

Стандартизация

C# стандартизирован в ECMA (ECMA-334) и ISO (ISO/IEC 23270).

Известно как минимум о трёх независимых реализациях C#, базирующихся на этой спецификации и находящихся в настоящее время на различных стадиях разработки:

Mono, начата компанией Ximian, продолжена её покупателем и преемником Novell, а затем Xamarin.

dotGNU и Portable.NET, разрабатываемые Free Software Foundation.

Версии

На протяжении разработки языка C# было выпущено несколько его версий:

! rowspan="2" | Версия

! colspan="3" | Спецификация языка

! 5. Aramberri J. Intraocular lens power calculation after corneal refractive surgery: double-K method // J. Cataract Refract. Surg. 2003. 29. 2063-2068. 6. Kim J.-H., Lee D.-H., Joo C.-K.Measuring corneal power for intraocular lens power calculation after refractive surgery; comparison of methods // J. Cataract Refract. rowspan="2" | .NET Framework

! rowspan="2" | Visual Studio

! ECMA

! ISO/IEC

! Microsoft

! !! C# 2.0 !! C# 3.0 !! C# 4.0 !! Глава 2 Организации  внутрифирменных  планирований. План  предприятия до   своему  содержанию представляет  совокупность взаимосвязанных мероприятий по повышению прибыли за  счет  увеличения эффективности использования всех применяемых ресурсов и реализации продукции. Успешность, эффективность  системы планирования определяется в значительной  мерочке уровнем  ее организации, которая направлена на планомерное сочетание основных  элементов  системы планирования:
- плановый  персонал, сформированный в организационную  структуру;
-  механизм  планирования;
-  процесс обоснования, принятия и реализации  плановых  решений (процесс планирования);
- средства,  обеспечивающие  процесс планирования (информационное, техническое, математико-программное, организационное  и лингвистическое  обеспечение). Вся  система  организации планирования  должна быть направлена на создание наиболее благоприятных  условий  для совершенствования процессов  управления  предприятием. Если  гипотеза планирования раскрывает закономерности и принципы обоснования плановых  решений, то  организация планирования  исследует  процессно-структурный  аспект. Плановый  круг, персонал или штат. Сюда  входят все  специалисты, которые в той  или иной мерочке выполняют функции планирования. C# 6.0

!Новыевозможности

Обобщения

Смешанные типы

Анонимные методы

Итераторы

Нуль-типы

Неявно типизируемые локальные переменные

Инициализаторы объектов и коллекций

Автоматическая реализация свойств

Анонимные типы

Методы расширения

Запросы

Лямбда-выражения

Деревья выражений

Динамическое связывание

Именованные и дополнительные аргументы

Обобщенная

Асинхронные методы

Сведения о вызывающем объекте

Компилятор как сервис

Импорт членов статических типов в пространство имён

Фильтры исключений

Await в блоках catch/finally

Инициализаторы авто-свойств

Значения по умолчанию для get-свойств

Операторы с условием NULL

Интерполяция строк

Оператор nameof

Инициализатор словаря

Версия 1.0

Проект C# был начат в декабре 1998 и получил кодовое название COOL (C-style Object Oriented Language). Версия 1.0 была анонсирована вместе с платформой .NET в июне 2000 года, тогда же появилась и первая общедоступная бета-версия; C# 1.0 окончательно вышел вместе с Microsoft Visual Studio .NET в феврале 2002 года.

Первая версия C# напоминала по своим возможностям Java 1.4, несколько их расширяя: так, в C# имелись свойства (выглядящие в коде как поля объекта, но на деле вызывающие при обращении к ним методы класса), индексаторы (подобные свойствам, но принимающие параметр как индекс массива), события, делегаты, циклы codice_1, структуры, передаваемые по значению, автоматическое преобразование встроенных типов в объекты при необходимости (boxing), атрибуты, встроенные средства взаимодействия с неуправляемым кодом (DLL, COM) и прочее.

Кроме того, в C# решено было перенести некоторые возможности C++, отсутствовавшие в Java: беззнаковые типы, перегрузку операторов (с некоторыми ограничениями, в отличие от C++), передача параметров в метод по ссылке, методы с переменным числом параметров, оператор codice_2 (с ограничениями). Также в C# оставили ограниченную возможность работы с указателями — в местах кода, специально обозначенных словом codice_3 и при указании специальной опции компилятору.

Версия 2.0

Проект спецификации C# 2.0 впервые был опубликован Microsoft в октябре 2003 года; в 2004 году выходили бета-версии (проект с кодовым названием Whidbey), C# 2.0 окончательно вышел 7 ноября 2005 года вместе с Visual Studio 2005 и .NET 2.0.

Новые возможности в версии 2.0

Частичные типы (разделение реализации класса более чем на один файл).

Обобщённые, или параметризованные типы (generics). В отличие от шаблонов C++, они поддерживают некоторые дополнительные возможности и работают на уровне виртуальной машины. Вместе с тем, параметрами обобщённого типа не могут быть выражения, они не могут быть полностью или частично специализированы, не поддерживают шаблонных параметров по умолчанию, от шаблонного параметра нельзя наследоваться, и т. д.

Новая форма итератора, позволяющая создавать сопрограммы с помощью ключевого слова codice_4, подобно Python и Ruby.

Анонимные методы, обеспечивающие функциональность замыкания.

Оператор '??': codice_5 означает (в нотации C# 1.0) codice_6.

Обнуляемые ('nullable') типы-значения (обозначаемые вопросительным знаком, например, codice_7), представляющие собой те же самые типы-значения, способные принимать также значение codice_8. Такие типы позволяют улучшить взаимодействие с базами данных через язык SQL.

Ключевые слова: кератометрия, топография роговицы, эффективное положение линзы, расчет силы интраокулярная линза, рефракционные операции. Среди причин рефракционных ошибок имплантации интраокулярная линза по поводу катаракты на глазах, перенесших в прошлом кераторефракцион-ную операцию, выделяются несколько. В навечерие, это некорректность определения преломляющей силы роговицы при кератометрии и кератотопографии. По данным большинства исследователей, в ходе проведения стандартной кератометрии происходит значительное завышение силы преломления роговицы, что приводит к недооценке силы интраокулярная линза и послеоперационному сдвигу рефракции в сторону гиперметропии [1, 2]. Предполагается, что это завышение происходит, во-первых, из-за изменения площади отражения мет кератоме-тра в центральной зоне роговицы в результате изменения геометрии передней поверхности роговицы [3], а во-вторых—из-за изменения коэффициента преломления, принятого для большинства кератометров 1,3375 [4]. Другой причиной служит неверное определение глубины передней камеры артифакич-ного глазища, называемой также эффективным положением линзы (ЭПЛ) [5]. Наконец, третьей причиной, по мнению некоторых авторов, является неадекватное применение формул для расчета интраокулярная линза [1, 2, 6]. Большинство кераторефракционных операций выполняется при или в близорукости и близоруком астигматизме благодаря большей распространенности этих аномалий рефракции.

Поддержка 64-разрядных вычислений, что кроме всего прочего, позволяет увеличить адресное пространство и использовать 64-разрядные примитивные типы данных.



Версия 3.0

В июне 2004 года Андерс Хейлсберг впервые рассказал на сайте Microsoft о планируемых расширениях языка в C#3.0. В сентябре 2005 года вышли проект спецификации C# 3.0 и бета-версия C# 3.0, устанавливаемая в виде дополнения к существующим Visual Studio 2005 и .NET 2.0. Окончательно эта версия языка вошла в Visual Studio 2008 и .NET 3.5.

Новые возможности в версии 3.0



В C# 3.0 появились следующие радикальные добавления к языку:

ключевые слова codice_9, позволяющие делать запросы из XML документов, коллекций Эти запросы имеют сходство с запросами SQL и реализуются компонентом LINQ. (Сама фраза "language integrated query" переводится "запрос, интегрированный в язык".)

Инициализация объекта вместе с его свойствами:

 можно записать как

Лямбда-выражения:

 теперь можно записать как

Деревья выражений:

 лямбда-выражения теперь могут представляться в виде структуры данных, доступной для обхода во время выполнения, тем самым позволяя транслировать строго типизированные C#-выражения в другие домены (например, выражения SQL).

Вывод типов локальной переменной: codice_10 вместо codice_11

Безымянные типы: codice_12

Методы-расширения — добавление метода в существующий класс с помощью ключевого слова codice_13 при первом параметре статической функции.

Автоматические свойства: компилятор сгенерирует закрытое (private) поле и соответствующие аксессор и мутатор для кода вида



C# 3.0 совместим с C# 2.0 по генерируемому MSIL-коду; улучшения в языке — чисто синтаксические и реализуются на этапе компиляции. Например, многие из интегрированных запросов LINQ можно осуществить, используя безымянные делегаты в сочетании с предикатными методами над контейнерами наподобие codice_14 и codice_15.

Версия 4.0

Превью C# 4.0 было представлено в конце 2008 года, вместе с CTP-версией Visual Studio 2010.

Visual Basic 10.0 и C# 4.0 были выпущены в апреле 2010 года, одновременно с выпуском Visual Studio 2010.

Новые возможности в версии 4.0

Возможность использования позднего связывания, для использования:

* с языками с динамической типизацией (Python, Ruby)

* с COM-объектами

* отражения (reflection)

* объектов с изменяемой структурой (DOM). Появляется ключевое слово dynamic.

Именованные и опциональные параметры

Новые возможности COM interop

Ковариантность и контравариантность

Контракты в коде (Code Contracts)



Примеры:

Пример «Hello, World!»

Ниже представлен код классической программы «Hello world» на C# для консольного приложения:

и код этой же программы для приложения Windows Forms:

Реализации

Существует несколько реализаций C#:

Реализация C# в виде компилятора csc.exe включена в состав .NET Framework (включая .NET Micro Framework, .NET Compact Framework и его реализации под Silverlight и Windows Phone 7).

Бурденко могут проводить on-line- и off-line-консультации без необходимости передачки результатов обследования пациентов на электронных носителях самими пациентами или курьерами. Технологическое решение, разрешение, мнение или спасение уже получило одобрение со стороны руководства обеих клиник и регионального Министерства здравоохранения и социального развития. Важным преимуществом технологии стали ее простота также удобство в эксплуатации. В отличие от аналогичных узкопрофильных решений, требующих использования специального оборудования, Microsoft Office Communications Server 2007 R2 работает на базе обычного компьютера и стоит в несколько разок дешевле. ■■ ■ “2-	■ ■	■ ■ ■■ ■ ■ ■	■■■ ■ ■ ■	■■ ■ ■ ■■■ ■ ■ ■ ■ ■
Региональные ИС
www.idmz.nu
2009, №6
■■■■
Ш1
Ш1
Реализация проекта позволила:
•	организовать структуру принятия коллегиальных решений по кардио-больным;
•	сократить временные затраты на передачу результатов обследования и повысить оперативность принятия решений по методам лечения пациентов;
•	обеспечить возможность принятия участия в конференции специалистов независимо от их местоположения (рабочее место, конференц-зал, командировка);
•	повысить точность диагности и объективность принимаемых медицинских решений за счет участия в процессе большего числа специалистов;
•	сделать консультации ведущих специали-
стов федерального кардиоцентра доступными для пациентов других больниц региона;
• создать для врачей возможность обмена опытом и развития профессиональных навыков. Федеральный узел, очаг или центр обсуживает жителей не только Пензенской области, но и Оренбургской, Саратовской, Самарской, Рязанской, Ульяновской, Нижегородской, Тамбовской, Тульской областей, республик Марий Эл, Чувашия, Коми и Мордовия. Сегодня технологическое решение охватывает две больницы Пензенской области, впрочем в перспективе проект распространится и на медицинские учреждения других регионов. В дальнейшем данную технологию планируется приурочивать или применять также в офтальмологии, детской хирургии, нейрохирургии.

Проект Mono включает в себя реализацию C# с открытым исходным кодом.

Проект DotGNU также включает компилятор C# с открытым кодом.

DotNetAnywhere — ориентированная на встраиваемые системы реализация CLR, поддерживает практически всю спецификацию C# 2.0.

См. также

Visual Studio

Сравнение C# и Java

Cosmos (операционная система)

Vala

Примечания

Литература

Ссылки

