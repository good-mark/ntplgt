
БАЗЫ ДАННЫХ, ЗНАНИЙ 
И ЭКСПЕРТНЫЕ СИСТЕМЫ  
Тема . Запись в операторной форме 
(операторная нотация) 



Представление выражения  2*а+b*с  
в виде дерева 
В математике мы привыкли записывать выражения в таком виде:
        2*a  +  b*с
где  +  и  *  - это операторы, а    2,   а,   b,    с   - аргументы. 
В частности,  +   и  *  называют инфиксными операторами, поскольку они появляются между своими аргументами. 

Такие выражения могут быть представлены в виде деревьев, как это сделано на рис. 3,6, 
и записаны как прологовские термы с  +   и  *  в качестве функторов:
        +( *( 2, а), *( b, с) )
Рис. 3. 6.  Представление выражения  2*а+b*с  в виде дерева. 



Приоритет операций
Если мы напишем   а  +  b,  Пролог поймет эту запись, как если бы написали +(а, b). Для того, чтобы Пролог правильно воспринимал выражения типа а + b*с, он должен знать, что * связывает сильнее, чем +. То есть, что + имеет более низкий приоритет, чем *. 
Например, выражение а  +  b*с, в принципе можно понимать и как
        +( а, *( b, с) )
и как
        *( +( а, b), с)

Общее правило состоит в том, что оператор с самым низким приоритетом расценивается как главный функтор терма. 
Если мы хотим, чтобы выражения, содержащие  +  и  *,   понимались в соответствии с обычными соглашениями, то  + должен иметь более низкий приоритет, чем  *.  
Тогда выражение а  +   b*с означает то же, что и а  +  (b*с). 

Если имеется в виду другая интерпретация, то это надо указать явно с помощью скобок, например ( а + b)*с. 



Собственные операции
Например, можно определить атомы имеет и поддерживает в качестве инфиксных операторов, а затем записывать в программе факты вида:        
питер имеет информацию.        пол поддерживает стол.
Эти факты в точности эквивалентны следующим:
        имеет( питер, информацию).
        поддерживает( пол, стол).

Программист определяет новые операторы, вводя в программу особый вид предложений, которые иногда называют директивами. 

        :- ор( 600, xfx, имеет).

В соответствии с принципами языка ни с одним оператором не связывается каких-либо операций над данными (за исключением особых, редких случаев) 
Имена операторов это атомы, а их приоритеты - точнее, номера их приоритетов -должны находиться в некотором диапазоне, зависящем от реализации. 
Будем считать, что этот диапазон располагается в пределах от 1 до 1200.
(Чем выше приоритет, тем меньше его номер). 



Три группы типов операторов 
(1)        инфиксные операторы трех типов:
            xfx     xfy    yfx
(2)        префиксные операторы двух типов:
            fx     fy
(3)        постфиксные операторы двух типов:
            хf     yf
Рис. 3. 7.  Две интерпретации выражения а-b-с в предположении, что '-' имеет приоритет 500. Если тип '-' есть yfx, то интерпретация 2 неверна, так как приоритет b-с не выше, чем приоритет '-'. 



Приоритет аргумента 
Если аргумент заключен в скобки или не имеет структуры (является простым объектом), тогда его приоритет равен 0; 
Если аргумент структурный, тогда его приоритет равен приоритету его главного функтора. 
С помощью 'х' обозначается аргумент, чей приоритет должен быть строго выше приоритета оператора (т. е. его номер строго меньше номера приоритета оператора). 
С помощью 'у' обозначается аргумент, чей приоритет выше или равен приоритету оператора. 
Такие правила помогают избежать неоднозначности при обработке выражений, в которых встречаются операторы с одинаковым приоритетом. 
Например, выражение
        а-b-с
обычно понимается как (а-b)-с , 
а не как а-(b-с). 
Чтобы обеспечить такую обычную интерпретацию, оператор '-' следует определять как yfx. 



Пример: оператор not
В качестве еще одного примера рассмотрим оператор not 
(логическое отрицание "не"). 
Если not oпределён как fy, тогда выражение
        not  not  р
записано верно; 
Eсли not определен как fx, оно некорректно, потому что аргументом первого not является структура not p, которая имеет тот же приоритет, что и not. 
В этом случае выражение следует писать со скобками:
        not  (not  р)



Множество предопределенных операторов 
:- ор( 1200, xfx, ':-').
:- ор( 1200, fx, [:-, ?-] ).
:- op( 1100, xfy, ';').
:- ор( 1000, xfy, ',').
:- op( 700, xfx, [=, is, , >, ==, ==, =\=, \==, =:=]).
:- op( 500, yfx, [+, -] ).
:- op( 500, fx, [+, -, not] ).
:- op( 400, yfx, [*, /, div] ).
:- op( 300, xfx, mod).



Одна из теорем де Моргана 
~ (А & В)     ~А  v  ~В
На прологе 
эквивалентно( не( и( А, В)), или( не( A, не( B))) 
После введения операторов       
        :- ор( 800, xfx, ).
        :- ор( 700, xfy, v).
        :- ор( 600, хfу, &).
        :- ор( 500, fy, ~).

Правило де Моргана можно записать в виде факта:
        ~(А & В)     ~А  v  ~В.
Рис. 3. 9.  Интерпретация терма ~(А  &  В)   ~A  v  ~В 



Резюме
	Наглядность программы часто можно улучшить, использовав операторную нотацию. Операторы бывают инфиксные, префиксные и постфиксные.
	В принципе, с оператором не связываются никакие действия над данными, за исключением особых случаев. Определение оператора не содержит описания каких-либо действий, оно лишь вводит новый способ записи. Операторы, как и функторы, лишь связывают компоненты в единую структуру.
	Программист может вводить свои собственные операторы. Каждый оператор определяется своим именем, приоритетом и типом.
	Номер приоритета - это целое число из некоторого диапазона, скажем, между 1 и 1200. Оператор с самым больший номером приоритета соответствует главному функтору выражения, в котором этот оператор встретился. Операторы с меньшими номерами приоритетов связывают свои аргументы сильнее других операторов.
	Тип оператора зависит от двух условий:     
	(1)  его расположения относительно своих аргументов,    
	(2)  приоритета его аргументов по сравнению с его собственным. 
В спецификаторах, таких, как xfy,  х   обозначает аргумент, чей номер приоритета строго меньше номера приоритета оператора;  у   - аргумент с номером приоритета, меньшим или равным номеру приоритета оператора.




Упражнения
1.   Если принять такие определения
        :- ор( 300, xfy, играет_в).
  :- ор( 200, xfy, и).
то два следующих терма представляют собой синтаксически правильные объекты:
        Tepм1 = джимми играет_в футбол и сквош
  Терм1 = сьюзан играет_в теннис и баскетбол и волейбол
Как эти термы интерпретируются пролог-системой? 
Каковы их главные функторы и какова их структура?

2.   Предложите подходящее определение операторов ("работает", "в", "нашем"), чтобы можно было писать предложения типа:
        диана работает секретарем в нашем отделе.
а затем спрашивать:
        ?- Кто работает секретарем в нашем отделе.
        Кто = диана
        ?- диана работает Кем.
        Кем = секретарем в нашем отделе




