1   2   3   4   5   6   7   8   9   ...   36   Использование параметров секретности, настроенных или принятых по умолчанию 5-11 Управление системным доступом 5-11 Использование подсистемы контроля 5-14 Компоненты подсистемы контроля 5-15 Механизм контроля ядра 5-15 Драйвер устройства контроля 5-15 Демон контроля 5-16 Доступ к контролю через sysadmsh 5-17 Методология контроля 5-18 Авторизации контроля 5-18 Источники контрольных записей 5-18 Учитываемость в контроле 5-20 Типы событий контроля 5-21 Эффективный системный контроль 5-23 Административные аспекты 5-23 Процедуры контроля 5-26 Установка схемы сбора данных 5-27 Включение/выключение контроля 5-32 Сопровождение файлов контроля 5-32 Вывод списка контрольных записей 5-33 Дублирование контрольных записей 5-33 Составление контрольных отчетов 5-34 Понятие редукции данных 5-36 Форматы записей для системных вызовов 5-36 Контрольные записи прикладных программ 5-41 Проблемные области подсистемы контроля 5-44 Пространство на диске 5-44 Фатальные сбои системы 5-45 . Сообщения подсистемы 5-45 Терминология контроля 5-45 Средства защиты файловой системы 5-48 Очистка битов SUID/SGID и sticky-бита при записи 5-48 Sticky-бит и каталоги 5-49 Промены 5-51 Импортирование данных 5-51 Файлы 5-51 Файловые системы 5-52 Шифрование данных 5-53 Установка бита GID каталога 5-53 Проверка целостности системы 5-54 /etc/fsck 5-54 Контрольный журнал 5-54 Порядок проверок после фатального сбоя системы 5-55 Защищенные базы данных 5-55 Проверка базы данных аутентификации 5-57 Проверка целостности системы 5-57 Сообщения об ошибках, связанных с секретностью 5-59 Сообщения об ошибках регистрации в системе 5-59 Условия ошибок контроля 5-60 Проблемы авторизации 5-61 Функционирование демонов в надежной системе 5-62 Включение защиты с помощью кодового пароля 5-64 Разрешение пользователям монтировать файловые системы 5-65 Авторизация использования команд планирования заданий 5-66 Изменение авторизации на планирования заданий, принятой по умолчанию 5-66 Разрешение/запрещение использования cron отдельными пользователями 5-67 Просмотр пользовательских разрешений на cron 5-68 Разрешение/запрещение использования at/batch отдельными пользователями 5-68 Просмотр пользовательских разрешений на at/batch 5-68 Использование файлов среды для команд at/batch 5-69 . - 5-1 - ВВЕДЕНИЕ Каждая компьютерная система нуждается в защите от несанкци­онированного доступа к компьютеру, дискам и системным файлам. Средства обеспечения безопасности, имеющиеся в вашей системе, представляют собой расширение базовых средств обеспечения безо­пасности операционных систем UNIX. Операционная система спроек­тирована таким образом, чтобы удовлетворять требованиям класса надежности C2, согласно "Критерию оценки надежности компьютерных систем" Министерства обороны (так называемая "Оранжевая книга"). В данной главе показано, как пользоваться средствами обес­печения безопасности для поддержания надежности системы. Средс­тва, касающиеся обычного пользователя, описаны в главе "Исполь­зование надежной системы" в "Руководстве пользователя" (User's Guide). Данная глава содержит следующую информацию: * общий обзор безопасности системы * описание защищенных подсистем * как назначать административные роли * административное управление подсистемами с помощью sysadmsh * использование подсистемы контроля * защита файловых систем * проверка целостности системы * сообщения об ошибках * работа демонов в защищенной системе * включение защиты с помощью кодового пароля * как пользователи могут монтировать файловые системы * как пользователи могут планировать задания - 5-2 - Замечание О физической секретности Средства обеспечения безопасности в операционной системе будут бесполезны, если аппаратная часть и носители не защищены. Вы должны защитить от несанкционированного доступа сам компь­ютер, дистрибутивные дискеты и все носители с резервными копия­ми. Для этого нужно соблюсти следующие правила: 1. В отсутствие оператора держите систему "под замком". 2. Соберите и заприте все носители с резервными копиями. . - 5-3 -^  ЧТО ТАКОЕ НАДЕЖНАЯ СИСТЕМА? Поскольку не существует компьютерной системы, в которой риск сведен к нулю, для систем употребляется термин "надежная" (trusted) вместо "безопасная" (secure). Здесь имеется в виду то, что понимается под классом надежности С2. "Надежная" система - это система, в которой достигается некоторый уровень контроля над доступом к информации, обеспечивающий механизмы предотвраще­ния (или по крайней мере фиксирования) несанкционированного дос­тупа. Средства секретности операционной системы являются расшире­нием средств, имеющихся в типичных, менее "надежных" системах UNIX. Наряду с расширением возможностей защиты пользовательской и системной информации, обеспечивается полная совместимость с существующими механизмами UNIX. Большая часть работы администра­тора системы включает сопровождение и защиту системной информа­ции, как описано в настоящем разделе. При установке системы, если включен контроль, система кон­фигурируется для работы в "надежном" состоянии. В этом состоянии только назначенный администратор может обращаться к системной информации и изменять ее. Как только система переходит в нор­мальный режим работы, надежное состояние системы следует поддер­живать, если вы намерены полностью использовать средства надеж­ности. Если вы будете следовать приведенным рекомендациям, сис­темная информация останется защищенной. Имеется также возможность приспособить эти требования к нуждам вашей вычислительной установки. Можно даже установить конфигурацию вашей системы таким образом, чтобы она работала в ненадежном режиме, совместимом с другими системами UNIX. Это описано в разделе "Конфигурация для ведения учета, устанавливае­мая по умолчанию". Заметим, что если вы решили смягчить требова­ния, определяющие надежное состояние своей системы, ее нельзя с достоверностью восстановить на уровень С2. Ваши действия как администратора являются решающими для сопровождения надежной системы. Любые упущения в секретном сос­тоянии чреваты проникновением в систему. Чтобы эффективно вести административную работу, вы должны понимать, в чем состоит сис­темная стратегия секретности, как она контролируется системной информацией (базами данных) и как вносимые вами изменения влияют на действия пользователя и администратора. Концепции надежной системы Ниже приводятся основные понятия, связанные с надежной сис­темой. Будучи администратором, вы для успешной работы системы должны усвоить эти понятия и знать, где хранится информация, связанная с секретностью. Настоящий раздел является вводным в эту тему; в последующих разделах данной главы приводятся подроб­ности, а также процедуры сопровождения. . - 5-4 - Возможность учета Говорят, что некоторое действие поддается учету, если его можно отследить вплоть до источника - реального пользователя. В безопасной системе все пользователи несут ответственность за свои действия, и каждое действие можно отследить до пользовате­ля, ответственного за него. В большинстве систем UNIX отсутству­ет хорошая учитываемость: некоторые действия нельзя отследить ни до какого пользователя. Например, псевдо-пользовательские бюдже­ты, такие как lp или cron, выполняются анонимно; их действия можно обнаружить только по изменениям в системной информации. Как будет описано ниже, надежная система UNIX повышает учитывае­мость за счет сопоставления каждому бюджету реального пользова­теля, контроля над каждым действием и сопоставления каждого действия конкретному пользователю в системе. В типичной системе UNIX у каждого процесса есть реальный и эффективный идентификаторы пользователя, равно как и реальный и эффективный идентификаторы группы. Процесс с эффективным иденти­фикатором пользователя root может устанавливать эти идентифика­торы для любых пользователей. Концепция идентификации пользова­теля расширена включением дополнительного идентификатора, назы­ваемого регистрационным идентификатором пользователя (LUID). Это нечто вроде нестираемой метки, проставляемой на каждом процессе, связанном с пользователем. LUID идентифицирует пользователя, от­ветственного за сессию процесса. LUID процесса, будучи однажды проставлен, не может быть изменен никем. Дочерние процессы нас­ледуют родительский LUID. Дискреционное управление доступом Средства дискреционного управления доступом позволяют опре­делить, имеет ли некоторый пользователь доступ к информации, ко­торую он хочет получить. Эта информация находится внутри некото­рого объекта (файла, устройства и т.д.), которым пользователь­ский процесс пытается воспользоваться. В большинстве систем UNIX защита объекта осуществляется через взаимосвязь между пользова­телем и группой процесса, с одной стороны, и битами режимов объ­екта (владелец, группа, прочие), с другой стороны. Атрибуты за­щиты для этих объектов находятся на усмотрении владельца объек­та. Поэтому эти атрибуты владелец может сделать ограничивающими (контролируемый доступ) или разрешающими (открытый доступ). В надежной системе UNIX стандартные правила дискреционного управ­ления доступом расширены так, что они обеспечивают более полную защиту системной информации (системных баз данных), разделяемой информации (временных каталогов) и входных файлов программы SUID (установка идентификатора пользователя при выполнении) - напри­мер, сообщения почты. Помимо этого, в дискреционную стратегию доступа для UNIX добавлен механизм, который может воспрепятствовать получению программой SUID доступа к файлам запустившего ее пользователя. Пользователь может создать промен (promain - protected domain, т.е. защищенный домен). Промен является иерархией каталогов (поддеревом). Когда пользователь запускает программу SUID, она может произвести доступ к своим личным файлам только в том слу­чае, если эти файлы находятся в упомянутом поддереве. Вне проме- . - 5-5 - на программа SUID имеет доступ только к тем файлам, к которым имеют доступ и активизатор программы, и ее владелец. Это сужает рамки разрушения, которое может быть вызвано программой SUID в данном каталоге. Такой механизм подробно описывается в странице Руководства для promain(M) в "Справочнике пользователя" (User's Reference). Авторизации Авторизация - это право на доступ к некоторому объекту или на выполнение какого-либо системного действия. В большинстве систем UNIX все решения по поводу доступа принимаются на основе простых дискреционных критериев, или исходя из того, является ли root владельцем процесса, осуществляющего доступ. Корневой бюд­жет имеет полномочия на выполнение таких системных действий, ка­кие не может выполнять никакой другой процесс. Операционная Сис­тема определяет два типа авторизаций: авторизации ядра и авторизации подсистемы. Авторизации ядра связаны с процессами. (Процесс - это программа, выполняющаяся в системе в данный мо­мент.) Они разрешают процессу выполнять определенные действия, если процесс наделен требуемыми привилегиями. Авторизации под­системы связаны с пользователями. Они позволяют пользователю вы­полнять специальные действия с помощью команд подсистемы (надеж­ные утилиты и программы). Подсистема - это связный набор файлов, устройств и команд, служащих для выполнения некоторой функции. Например, подсистема lp состоит из файлов блока подкачки печати, печатающих устройств и команд, помогающих сопровождать подсисте­му, таких как lpadmin(ADM). Авторизации ядра хранятся в авторизационном наборе, который сопоставляется каждому процессу. Авторизационный набор - это список привилегий, который разрешает некоторый тип действий при наличии определенной привилегии и запрещает в ее отсутствие. Ав­торизации будут рассмотрены позже. Установление идентичности и аутентичности (I&A) Когда пользователь регистрируется в малонадежной системе UNIX, выполняется ограниченная процедура установления идентич­ности и аутентичности. Система ищет имя пользователя в базе дан­ных паролей (/etc/passwd). Если имя пользователя отыскивается, система устанавливает аутентичность пользователя, сравнивая вве­денный пароль с шифрованной версией пароля, содержащейся в стро­ке базы данных паролей пользователя. Предусмотрены некоторые правила относительно характеристик пароля и возможности его из­менения, но, как показала практика, этих правил недостаточно для предохранения от проникновения через защиту. Надежная система расширяет стандартные механизмы I&A. В ней предусмотрено больше правил, касающихся типов используемых паро­лей. Имеются процедуры генерации и изменения паролей. Изменены местоположение и механизм защиты некоторых частей базы данных паролей. И, наконец, администратор теперь обладает большими воз­можностями контроля над действиями пользователей. Для обеспече­ния этого аспекта системы создана специальная роль - Администра­тор аутентификации (авторизация подсистемы auth). Обязанности этого администратора подробно описываются в последующих разделах. . - 5-6 - Контроль (audit) В большинстве систем UNIX ведется ограниченная регистрация системных действий с помощью соответствующей учетной подсистемы. Учетная подсистема пишет одну учетную запись при завершении каж­дого пользовательского процесса. Надежная операционная система обеспечивает продолжительный ряд записей о действиях - журнал (trail). В этот журнал заносится запись о каждом доступе, осу­ществляемом между субъектом и объектом, и о каждом изменении субъекта, объекта и системных характеристик. Подсистема контроля управляется специальной ролью, называемой Администратором конт­роля (авторизация подсистемы audit). Администратор контроля ре­шает, сколько информации следует записать и насколько надежно она записывается, а также сопровождает информацию, когда она собрана. Подсистема контроля предоставляет Администратору конт­роля обширную историю системных действий. Это помогает админист­ратору идентифицировать, что произошло в системе, когда и с чьим участием. Защищенные подсистемы В системах UNIX существуют механизмы setuid - установка идентификатора пользователя (SUID) - и setgid - установка иден­тификатора группы (SGID). С их помощью можно составлять програм­мы, обеспечивающие личную информацию. Доступ к этой информации и ее изменение разрешены только операциям, включенным в данные программы. Операционная Система определяет несколько защищенных подсистем. Каждая из таких подсистем состоит из совокупности личной информации (файлы и/или базы данных), любых связанных с ними устройств, а также утилит и команд, используемых для сопро­вождения этой информации. Защищенные подсистемы пользуются меха­низмами SUID/SGID для защиты своих личных файлов, баз данных и устройств от неограниченного доступа. Операционная Система рас­ширяет понятие защищенной подсистемы в нескольких аспектах: * в ней определена большая грануляция пользователей и групп, обеспечивающих определенные наборы системных ресурсов (личная информация); * она ведет специальную базу данных для пользователей, ко­торым разрешено выполнять программы, сопровождающие личную ин­формацию; * в ней не требуется, чтобы пользователи регистрировались в качестве администратора подсистемы; вместо этого используется база данных для проверки авторизации подсистемы. Этого достаточ­но для удовлетворения всех требований относительно полной учиты­ваемости любых действий, выполняемых программами подсистемы. . - 5-7 -^  РАБОТА НАДЕЖНОЙ СИСТЕМЫ В данном разделе обсуждается концептуальная структура соп­ровождения надежной системы. Первое основное решение, которое вы должны принять, - кто будет ее сопровождать. Вы можете иметь од­ного всемогущего супер-пользователя, зарегистрированного как root, или можно распределить административные обязанности между другими пользователями, выделяя им ровно столько возможностей, сколько необходимо для административного управления каким-либо одним аспектом работы системы. Назначение административных ролей с помощью авторизаций В надежной системе UNIX административные задачи распадаются на несколько логических ролей. Каждая роль ответственна за соп­ровождение одного аспекта системы. Идея о специфических адми­нистративных ролях (и соответствующих им задачах и обязанностях) является кардинальной в вашем представлении о надежной операци­онной системе. Любая логическая роль может быть назначена одному и тому же пользователю или различным членам некоторой админист­ративной группы. С каждой расширенной ролью связана специальная авторизация. Эта связь, наряду со сложной системой трассировки, позволяет администратору вести полную регистрацию административ­ных действий. Это помогает предотвращать одни проблемы и облег­чать идентификацию и устранение других проблем. Для выполнения задач, связанных с административной ролью, администратор должен иметь соответствующую авторизацию. В приво­димой ниже таблице перечисляются административные роли, связан­ные с ними авторизации, а также разделы системы, сопровождаемые каждой ролью. . - 5-8 - Таблица 5.1 Защищенные подсистемы и административные роли  Роль   Авторизация подсистемы   Раздел системы   Администратор аутентификацииАдминистратор принтера Администратор терминала* Администратор cron *Администратор памяти *Администратор контроля ОператорАдминистратор системы   auth lp terminal cron mem audit backup su sysadmin   Системный учет Подсистема устройства построчной печати Разрешения для терми­нального устройства Подсистема at и cron Доступ к памяти системы Базы данных контроля и контрольный журнал Резервные копии файловой системы Доступ su к бюджету супер-пользователя Использование программы integrity(ADM)  * В действительности эти роли не совсем административные, как поясняется ниже. Вы обязательно должны понять, какие обязанности включает в себя каждая роль, и как ваши действия повлияют на секретность системы. При формировании конфигурации и работе системы вы долж­ны исходить из чувствительности информации, хранящейся на вашей вычислительной установке, осознания степени взаимодействия и компетенции ваших пользователей, и угрозы (извне или изнутри) проникновения через защиту или неправильной работы. Лишь ваша бдительность и корректное использование системы смогут сохранить ее надежность и защитить ее целостность. Для назначения авторизации подсистемы необходимо в sysadmsh сделать следующий выбор: Accounts -> User -> Examine:Privilege Замечание Вы, вероятно, заметили, что каждая авторизация подсистемы оказывается идентичной групповому имени этой подсистемы. Это оз­начает, что если какой-то пользователь является членом группы подсистемы, то тем самым он имеет доступ к файлам подсистемы. Тем не менее, это не дает требуемой авторизации подсистемы. На самом деле никогда не следует делать пользователя членом группы подсистемы, так как это подвергнет риску актуальные файлы дан­ных. Для разрешения доступа к подсистеме используйте соответс­твующую авторизацию подсистемы. . - 5-9 - Административное управление подсистемами с помощью sysadmsh Некоторые подсистемы являются логическими разделами, а не действительными областями администрации системы. Например, под­система памяти по существу не подлежит административному управ­лению, но присваивание авторизации mem обеспечит контроль над доступом к структурам памяти ядра. Другие подсистемы нуждаются в администрации, и каждой из них соответствует определенный выбор в sysadmsh(ADM). Такие подсистемы могут быть назначены отдельным людям; по каждой области имеется документация. В таблице 5.2 приведен список административно управляемых подсистем, соответс­твующие им выборы sysadmsh и разделы или главы, в которых они рассматриваются. Таблица 5.2 Подсистемы и выборы sysadmsh  Защищенная подсистема   Выбор | sysadmsh |   Раздел или глава   Устройство постро­чной печатиДублированиеАутентификация CronКонтроль   Printers | | Backups | Accounts | | Jobs | | | System->Audit | |   "Использование принтеров" "Дублирование файловых систем""Административное управление пользовательскими бюджетами""Авторизация использования команд планирования заданий" (в данной главе)"Использование подсистемыконтроля" (в данной главе)  Подсистема audit описана ниже в данной главе. Подробное описание подсистем содержится в "Справочнике пользователя" (User's Reference), на странице, относящейся к subsystem(M). Там приведен список всех программ и файлов данных, связанных с каж­дой подсистемой. Большинство функциональных возможностей, обычно доступных супер-пользователю в других, менее надежных системах UNIX, переданы защищенным подсистемам, описываемым в данном раз­деле. Однако некоторые функции все равно должен выполнять супер­пользователь. К их числу относятся монтирование и демонтирование файловых систем, прохождение по полному дереву файла. Только су­пер-пользователь может делать все. Пользователи, обладающие ав­торизацией su, имеют доступ su(C) к бюджету супер-пользователя. Следует ограничить число пользователей, имеющих доступ к паролю root, и назначить ответственного пользователя для бюджета root. (Подробности см. в главе "Административное управление пользова­тельскими бюджетами" в настоящем руководстве.) Назначение авторизаций ядра В операционной системе имеется два типа авторизаций: для ядра и для подсистемы. Пользовательские процессы выполняются с набором авторизаций ядра, которые контролируют специальные права процесса на некоторые привилегированные системные действия. В Таблице 5.3 приведен список авторизаций ядра. . - 5-10 - Таблица 5.3 Авторизации ядра  Авторизация   Действие   configauditwriteauditexecsuidchmodsugidchownsuspendauditnopromain   Модификация параметров контроля Внесение контрольных записей в контрольный журнал Выполнение программ SUID Возможность устанавливать бит SUID и SGID в файлах Смена владельца объекта Приостанов контроля процессаДоступ пользователя извне каталога промена  Большинству пользователей требуются только авторизации nopromain и execsuid для выполнения стандартных задач. (Промены используются для изолирования выполнения данной программы, а не как постоянная мера защиты. nopromain - это обычный режим, с ко­торым работает пользователь; он его временно отменяет для про­верки выполнения программы. Подробнее см. promain(M).) Чтобы вы­полнять программы SUID, пользователь должен иметь авторизацию execsuid. (Программы установки идентификатора пользователя вы­полняются под контролем идентификатора, отличного от идентифика­тора инициатора этих программ. Так сделано для того, чтобы про­цесс имел доступ к файлам и системным средствам, которые в противном случае были бы недоступны.) Если пользователю нужно создавать файлы с битами SUID или SGID, он должен иметь автори­зацию chmodsugid. Чтобы сменить владельца файла (отдать файл), нужна авторизация chown. Если у пользователя нет этой авториза­ции, владельца файла может изменить только root. Замечание Для соответствия NIST FIPS 151-1 необходимо ограничение на chown. Эту авторизацию не нужно выдавать пользователям, если вы намерены соблюдать требования NIST FIPS 151-1. У каждого процесса имеется набор авторизаций, в котором пе­речислены его авторизации ядра. Процесс может выполнить некото­рое действие, только если соответствующая авторизация ядра вхо­дит в набор. Например, процесс с авторизацией configaudit может модифицировать параметры подсистемы контроля. Такой процесс вы­полняется Администратором контроля. Не следует выполнять никакие пользовательские процессы с какой-либо из авторизаций audit. Они предназначены для исключительного использования Администратором контроля. Для назначения авторизации ядра нужно сделать в sysadmsh следующий выбор: Account->User->Examine:Privileges . - 5-11 - Пользователи, которым присвоены административные роли, должны иметь определенные авторизации ядра, чтобы выполнять за­дачи, требуемые подсистемой. Если вы используете общесистемные авторизации ядра, принимаемые по умолчанию ("C2" или "Relaxed"), вам придется назначить лишь обязательные авторизации контроля; авторизации chown, execsuid и chown уже назначены. Таблица 5.4 Требования подсистем относительно авторизаций ядра    Подсистема  | Требуемые авторизации ядра     audit auth backup lp cronsysadmin   | configaudit, suspendaudit, execsuid| chown, execsuid| execsuid| chown| execsuid, chown, chmodsugid| execsuid, chmodsugid, chown  Использование параметров секретности, настроенных или при­нятых по умолчанию По умолчанию параметры секретности устанавливаются согласно уровню надежности С2. Как упоминалось выше, существует два дос­тупных набора параметров, принимаемых по умолчанию: C2 и "Relaxed", соответствующий характеру работы менее надежных сис­тем UNIX. Кроме того, можно изменить любой параметр - и для от­дельных пользователей, и по всей системе. Изменение общесистем­ных параметров описано в разделе "Конфигурация для ведения уче­та, устанавливаемая по умолчанию" в главе "Административное уп­равление пользовательскими бюджетами". Информация о параметрах для отдельных пользователей приведена в разделе "Управление уче­том" той же главы. Управление системным доступом Одним из важных аспектов работы в надежной системе является выявление потенциальных проблем, относящихся к секретности. Ог­раничительные механизмы подразделяются на три категории, каждая из которых может быть приспособлена к конкретным требованиям и сопровождаться отчетами: * Статус пароля * Активность терминала * Активность начальной регистрации Каждая из этих областей имеет важное значение для точного определения потенциальных проблем с секретностью. Процедуры для выполнения этих отчетов можно найти в разделе "Генерация отчетов об активности" в главе "Административное управление пользова­тельскими бюджетами". В последующих подразделах поясняется, как реализуются эти ограничения. . - 5-12 - Статус пароля В качестве модели для введения ограничений на пароли был использован документ "Руководство по использованию паролей" (Password Management Guideline) Министерства обороны; поэтому пользователи подвергаются более серьезной проверке на пароли, чем в менее надежных системах UNIX. Администратор аутентификации может либо разрешить пользователям самим выбирать себе пароли, либо обязать систему генерировать для них пароли. Пароль, будучи однажды выбран, может подвергнуться большому числу элементарных проверок, что опять же зависит от Администратора аутентификации. Для паролей существует три уровня действительности, что яв­ляется расширением реализации процесса старения пароля в стан­дартной системе UNIX. Пароли остаются действительными, пока не настанет достигнут его срок истечения действия. Когда срок дейс­твия пароля истекает, пользователь (если ему разрешено это де­лать) получает приглашение на изменение своего пароля. Если пользователю не разрешено менять свой пароль, администратор дол­жен назначить новый пароль. Пароли считаются expired, пока не завершится их жизненный цикл. Мертвый пароль вызывает блокирование пользовательского бюджета. Снять эту блокировку может только Администратор аутен­тификации, используя выбор Accounts в sysadmsh. Если пользовате­лю не разрешено менять пароль, нужно назначить новый. Во избежание повторного использования паролей Администратор аутентификации может также установить минимальный срок изменения для пароля, до которого пользователь не имеет права менять паро­ли. Все эти параметры можно изменить - и по всей системе (база данных системных параметров, принимаемых по умолчанию), и для отдельных пользователей (база данных защищенных паролей). Обще­системное изменение параметров паролей описано в разделе "Изме­нение ограничений на пароли, принятых по умолчанию" в главе "Ад­министративное управление пользовательскими бюджетами" настояще­го руководства, а полное описание процедур изменения паролей приведено в разделе "Изменение пароля пользователя или парамет­ров пароля" той же главы. Отчеты по паролям можно использовать для предотвращения блокировки пользовательских бюджетов; эта ситуация очень непри­ятна, если администратор системы отсутствует. Если в вашей сис­теме не принято ежедневное присутствие администраторов, вы имее­те право претендовать на соответствующее увеличение параметра жизненного цикла пароля. Активность терминала Терминал - это вход в вашу систему. Помимо использования паролей бюджетов, терминалы можно защитить от попыток проникно­вения в систему. Можно задать максимальное число неудачных попы­ток регистрации, которые обычно связаны с попытками угадать па- . - 5-13 - роль бюджета. Терминалы, для которых превышено максимально допустимое число попыток, будут заблокированы; снимать блокиров­ку должен Администратор бюджетов. Кроме того, можно задать ин­тервал времени, который должен пройти между попытками регистра­ции, что также может помочь пресечь попытки угадать пароль. (Аналогичные ограничения можно ввести для бюджетов, отличных от терминалов.) О том, как изменять или проверять ограничения для терминала, см. раздел "Управление регистрацией терминала" в гла­ве "Административное управление пользовательскими бюджетами" настоящего руководства. Активность начальной регистрации Как и в случае терминалов, у пользовательских бюджетов есть параметры, связанные с числом попыток регистрации и интервалом для повторной попытки, которые относятся к регистрации в бюдже­те, а не в терминале. О том, как изменять или проверять эти ог­раничения, см. раздел "Изменение ограничений при регистрации, принятых по умолчанию" в главе "Административное управление пользовательскими бюджетами" настоящего руководства. . - 5-14 -^  ИСПОЛЬЗОВАНИЕ ПОДСИСТЕМЫ КОНТРОЛЯ Подсистема контроля регистрирует события в системе, связан­ные с секретностью, записывая их в контрольный журнал, который затем можно просмотреть. В контрольных журналах, выдаваемых под­системой, можно фиксировать проникновение в систему и неправиль­ное использование ресурсов. Подсистема контроля спроектирована в соответствии с задачами контроля, определяемыми Национальным центром защиты данных компьютеров США. Контроль позволяет просматривать собранные данные для изу­чения образцов доступа к объектам и наблюдения за действиями от­дельных пользователей и их процессов. Попытки нарушения защиты и механизмов авторизации контролируются. Подсистема контроля дает высокую степень гарантии обнаружения попыток обойти механизмы обеспечения безопасности. Поскольку события, связанные с секрет­ностью, контролируются и поддаются учету вплоть до выявления конкретного пользователя, подсистема контроля служит сдерживаю­щим средством для пользователей, пытающихся неправильно восполь­зоваться системой. Подсистема контроля использует системные вызовы и утилиты для классификации действий пользователей, подразделяя их на типы событий. Это можно использовать для выборочной генерации и ре­дукции контроля. Один из этих типов событий, Отказ дискреционно­го доступа (DAC), регистрирует попытки такого использования объ­ектов, которое не допускается разрешениями для этого объекта. Например, если пользовательский процесс пытается писать в файл "только для чтения", регистрируется событие Отказа DAC, показы­вающее, что процесс пытался произвести запись в файл, на что у него не было права. Если просмотреть контрольный журнал, то лег­ко будет заметить повторяющиеся попытки доступа к файлам, на ко­торые не выданы разрешения. Для эффективности данных контроля существенна возможность учета пользователей, выполняющих действия, подлежащие контролю. Когда пользователи пытаются войти в систему, они должны пройти процесс идентификации и аутентификации, прежде чем им будет пре­доставлен доступ в систему. Механизм секретности снабжает каждый процесс, создаваемый пользователем, постоянным индикатором иден­тичности - регистрационным идентификатором пользователя (LUID). Этот идентификатор сохраняется невзирая на переходы от одного пользовательского бюджета к другому с помощью таких команд, как su(C). Каждая контрольная запись, генерируемая подсистемой, со­держит LUID наряду с эффективным и реальным идентификаторами пользователя и группы для процесса. В итоге оказывается возмож­ным строгий учет действий пользователей. Подсистема контроля управляется Администратором контроля. Будучи Администратором контроля, вы обладаете полным контролем над событиями, выбранными для генерации контрольных записей, над значениями параметров подсистемы контроля и над последующей ре­дукцией и анализом данных контроля. . - 5-15 - Компоненты подсистемы контроля Подсистема контроля состоит из четырех главных компонентов: * Механизм контроля ядра * Драйвер устройства контроля (/dev/audit) * Демон уплотнения данных контроля - auditd(ADM) * Интерфейс контроля sysadmsh Существует несколько надежных системных утилит, которые, хотя на самом деле и не являются собственно частью подсистемы контроля, отвечают за занесение контрольных записей в контроль­ный журнал (например, login(M)). Механизм контроля ядра Механизм контроля ядра является центральным в подсистеме контроля. Этот механизм генерирует контрольные записи, исходя из активности пользовательских процессов, с помощью системных вызо­вов ядра. Каждый системный вызов ядра содержит строку в таблице подсистемы, где указано, связан ли этот вызов с вопросами сек­ретности, и если это так, то какому типу события он соответству­ет. Кроме того, используется таблица кодов ошибок, позволяющая классифицировать системные вызовы на конкретные события, связан­ные с секретностью. Механизм контроля ядра выдает внутренний вы­зов в драйвер устройства для занесения записи в контрольный жур­нал. Например, системный вызов open(S) классифицируется как со­бытие Сделать объект доступным. Если пользователь blf выполняет open(S) для /unix и делает это успешно, генерируется контрольная запись об этом событии. Однако если системный вызов заканчивает­ся неудачно из-за того, что blf запросил в open(S) доступ по за­писи, не имея разрешения на запись в этот файл, это действие классифицируется как событие Отказ дискреционного доступа для blf и объекта /unix. Следовательно, системный вызов можно отоб­разить в несколько типов событий, в зависимости от объекта, к которому осуществляется доступ, и/или результата вызова. Поэтому возникает возможность выборочного контроля системных вызовов, в зависимости от типов событий, которые вы сделаете доступными. Некоторые системные вызовы не относятся к секретности. Нап­ример, getpid(S) получает идентификатор процесса и не определяет событие, связанное с секретностью. Таким образом, этот системный вызов не подлежит контролю. Драйвер устройства контроля Драйвер устройства контроля выполняет следующие функции: прием контрольных записей от механизма контроля ядра и от надеж­ных утилит; создание и запись промежуточных файлов контрольного журнала; предоставление данных контрольного журнала демону конт­роля для уплотнения; обеспечение выборочной генерации контроль­ных записей на основе типов событий, идентификаторов пользовате­лей и идентификаторов групп. . - 5-16 - Драйвер устройства обеспечивает интерфейсы open(S), close(S), read(S), write(S) и ioctl(S), как и прочие символьные устройства. Однако устройство контроля может быть открыто только процессами, обладающими авторизациями ядра configaudit и/или writeaudit. Это ограничивает доступ к устройству контроля, раз­решая его только для надежных утилит, таких как интерфейсы демо­на контроля и Администратора контроля. В устройство контроля мо­гут писать несколько процессов одновременно. Это устройство про­изводит объединение записей в контрольный журнал. Читать с устройства может только один процесс - демон контроля. Драйвер устройства контроля ведет контрольный журнал в виде набора файлов сбора данных контроля. Каждый раз, когда вы вклю­чаете контроль, начинается новая сессия контроля. При ее запуске подсистема создает файл сбора данных, в который заносятся конт­рольные записи. Когда файл сбора данных достигает определенного размера, установленного администратором, подсистема создает но­вый файл сбора данных и начинает писать в него. Поэтому конт­рольный журнал можно рассматривать как постоянно увеличивающийся последовательный файл, даже если используется несколько файлов сбора данных. Именно в таком виде контрольный журнал рассматри­вается демоном контроля, потому что он читает с устройства и по­лучает записи из контрольного журнала. При достижении конца фай­ла сбора данных подсистема выполняет соответствующее переключе­ние на новый файл сбора данных. Все это прозрачно для демона. Демон контроля Демон контроля auditd(ADM) - это надежная утилита, выполня­ющаяся как фоновый демон-процесс при включении контроля. Этот демон - единственный, кто читает с устройства контроля, которое в свою очередь представляет демону блоки записей из файлов сбора данных контроля. Демону безразлично, что контрольный журнал расслаивается на множество файлов сбора данных. Драйвер устройс­тва контроля удовлетворяет запросы на чтение, поступающие от де­мона, и обрабатывает переключение и удаление файлов сбора данных по мере надобности. Главное предназначение демона состоит в предоставлении ме­ханизма уплотнения данных и регистрации для сессии контроля. Де­мон также выполняет функцию поддержки защищенных подсистем, поз­воляя им писать в подсистему контрольные записи. В зависимости от выбранного вами критерия формирования контрольных записей, в системе может быть сгенерировано огромное количество данных контроля. В типичном случае однопользовательской системы генера­ция 200 килобайтов данных контроля за час не будет выглядеть не­обычно. Поэтому демон предоставляет механизм уплотнения для сжа­тия данных контроля в упакованный формат записи, которая сохра­няется в файле уплотнения контроля. Второй функцией демона является обеспечение журнального файла, описывающего текущую сессию контроля. Журнальный файл со­держит информацию о количестве контрольных записей, доступных в уплотненных файлах вывода в сессии; время запуска и останова сессии; а также другие индикаторы состояния сессии контроля. Как только драйвер устройства контроля переключает файлы сбора дан- . - 5-17 - ных при достижении ими размеров, установленных администратором, демон может создать несколько уплотненных файлов, чтобы не до­пустить увеличения одного файла до размеров, недоступных управ­лению. Вы также это контролируете. Кроме того, уплотненные фай­лы, записанные демоном, можно разместить в любом каталоге, опре­деленном администратором. По этим причинам ведется журнальный файл - чтобы иметь журнал с уплотненными файлами, которые можно использовать для последующей редукции данных. Третья функция демона контроля - выполнять роль программы интерфейса с драйвером устройства контроля для занесения конт­рольных записей из защищенных подсистем, не имеющих авторизации writeaudit. Так как эти подсистемы не могут осуществлять доступ непосредственно к драйверу устройства контроля, но могут образо­вать интерфейс с демоном с соблюдением секретности, то демон вы­полняет занесение контрольной записи прикладной программы в под­систему. Доступ к контролю через sysadmsh sysadmsh предоставляет простые возможности для установки и сопровождения подсистемы контроля. Это позволяет администратору выполнять установку и инициализацию, модифицировать параметры подсистемы, сопровождать подсистему (резервное дублирование, восстановление и т.д.) и выполнять редукцию как общих, так и вы­борочных данных контроля. Средство редукции/анализа данных sysadmsh также включает в себя утилиту редукции/анализа данных, которая облегчает исследование контрольных журналов пре­дыдущих сессий контроля или текущей сессии контроля. Используя журнальный файл, созданный демоном контроля, утилита редукции может идентифицировать все уплотненные файлы, нужные для редук­ции сессии контроля. Так как уплотненные файлы имеют сжатый фор­мат, программа редукции содержит подпрограммы, необходимые для развертывания файлов. Для обеспечения эффективного анализа данных контроля утили­та редукции позволяет задавать для выборочной редукции данных определенные типы событий, идентификаторы пользователей, иденти­фикаторы групп и имена объектов. Более того, вы можете задать интервал времени, в течение которого должен производиться поиск записей, удовлетворяющих выбранному критерию. Если какая-либо запись не попадает в этот интервал, она отбрасывается в данной редукции. Например, вы можете выполнять редукцию данных, выбирая со­бытие Отказа DAC для пользователя с идентификатором blf, ведуще­го поиск объекта /unix. Будут распечатаны только те записи, ко­торые отражают попытки доступа blf к /unix, отвергнутые ввиду отсутствия нужных разрешений. Это образует мощный механизм для идентификации событий секретности, представляющих актуальный ин­терес, без анализа всего контрольного журнала. . - 5-18 - Методология контроля В данном разделе описывается, как функционирует подсистема контроля, какие критерии используются при сборе данных, и как требования контроля влияют на производительность системы. Авторизации контроля С подсистемой контроля связаны три авторизации: configaudit, writeaudit и suspendaudit. Авторизация configaudit позволяет устанавливать параметры контроля для всех пользователей системы. Авторизация writeaudit позволяет регистрировать специфичес­кую информацию в контрольном журнале. Авторизация suspendaudit отключает всякий контроль. Источники контрольных записей Контрольный журнал содержит содержит информацию о событиях в системе, связанных с секретностью. Эффективный контроль охва­тывает не только запросы на системные вызовы, поступающие от пользовательских процессов, но и определенные события, такие, как вход в систему, выход из системы, неудачные попытки регист­рации. Эти события критичны для определения того, кто выполнял доступ к системе, в какие моменты времени, с какого терминала, и какие именно действия были выполнены. Неудачные попытки регист­рации невозможно контролировать на уровне ядра, поскольку ему неизвестно, что конкретно делает прикладная программа. Таким об­разом, следует дать возможность генерировать контрольные записи и некоторым утилитам, влияющих на секретность, например login. Контрольные записи генерируются из трех источников (описы­ваемых в последующих разделах): * механизм контроля ядра * надежные прикладные процессы * авторизованные подсистемы Механизм контроля ядра Значительная часть контрольных записей, хранящихся в конт­рольном журнале, генерируется механизмом контроля ядра. Этот раздел подсистемы контроля генерирует записи в ответ на систем­ные вызовы пользовательских процессов, отображаемые в события, связанные с секретностью. Некоторые системные вызовы, например open(S), отображаются в несколько событий секретности, в зависи­мости от аргументов пользователя и от состояния открываемого файла. Если open(S) вызывается с флагом O_CREAT, файл создается, если он не существовал. Если задан флаг O_TRUNC, выполняется . - 5-19 - усечение файла до нулевой длины, если он существует. Это показы­вает, как вызов open(S) может отобразиться в одно из трех раз­личных событий: Сделать объект доступным, Создание объекта или Модификация объекта. Важную роль в определении события играют также коды ошибок. Ошибки при выполнении системных вызовов, указывающие, что доступ или разрешение отвергнуты, равно как и проблемы потребления ре­сурсов, отображаются в конкретные типы событий. Механизм контро­ля ядра в конце системного вызова определяет, какому классу со­бытий принадлежит вызов, и задали ли вы контроль этого события. Более того, данный механизм может также применить дополнительные критерии выбора, например, идентификатор пользователя или иден­тификатор группы. Таким образом можно ограничить генерацию конт­рольных записей, задав ее только для избранной группы пользова­телей. Надежные прикладные программы Надежная вычислительная база (TCB) содержит несколько на­дежных прикладных программ, необходимых для обеспечения безопас­ной среды. Среди них - login, su и различные команды подсистемы контроля. Для сокращения объема данных контроля, записанных в контрольный журнал, и для повышения значимости информации в жур­нале этим надежным прикладным программам разрешено писать прямо на устройство контроля. Тем самым, например, login сможет занес­ти контрольную запись о регистрации в системе прямо в контроль­ный журнал, вместо того, чтобы представлять эту регистрацию в виде набора системных вызовов, требуемых для завершения этой процедуры. Но недостаточно просто позволить надежным прикладным прог­раммам писать на устройство контроля. В механизме контроля ядра должен быть также предусмотрен способ подавления генерации конт­рольных записей о системных вызовах, чтобы избежать загроможде­ния контрольного журнала. Для этого существует авторизация suspendaudit, о которой уже шла речь. Надежные прикладные прог­раммы выполняются с этой авторизацией, что позволяет приостано­вить контроль системных вызовов ядра для данного процесса и раз­решить ему открывать устройство контроля и писать в него. Только нескольким надежным прикладным программам разрешено это делать. Обычный пользовательский процесс никогда не выполняется с авто­ризацией suspendaudit. Механизмом авторизации управляет login, используя ограниченные системные вызовы; этот механизм использу­ет элементы базы данных защищенных паролей. Авторизованные подсистемы Третий способ генерации контрольных записей использует ав­торизованные подсистемы, такие, как lp, cron, terminal и mem. Иногда подсистема наталкивается на аномалии или проблемы, для которых желательно составить информативную контрольную запись. Однако подсистемы не имеют авторизации writeaudit и не могут за­носить контрольные записи непосредственно в подсистему. . - 5-20 - Вместо этого подсистемы формируют записи, как надежные прикладные программы, и представляют их процессу демона контроля через защищенный интерфейс. Демон контроля, являющийся надежной прикладной программой, записывает контрольную запись в устройс­тво контроля. Это позволяет процессам защищенных подсистем гене­рировать осмысленные и информативные контрольные записи, не по­лучая авторизации writeaudit. Учитываемость в контроле Подсистема контроля отслеживает системные события, связан­ные с секретностью, и сопоставляет их с конкретными пользовате­лями. Пользователи входят в систему через программу login. Эта программа выполняет аутентификацию пользователя, чтобы опреде­лить, разрешен ли ему доступ. Процедура регистрации в системе усовершенствована таким образом, чтобы позволить контролировать и успешные, и неудачные попытки регистрации. Когда регистрация пользователя проходит успешно, login проставляет на пользова­тельском процессе постоянный идентификатор - регистрационный идентификатор пользователя (LUID). Независимо от количества сис­темных вызовов setuid(S) и setgid(S), сделанных этим процессом, LUID не изменяется. Для процесса и для пользователя обеспечива­ется строгая учитываемость. Пользовательский процесс может по- -прежнему выполнять системные вызовы setuid(S) и setgid(S), кото- рые также контролируются. В контрольных записях указывается LUID процесса наряду с эффективным и реальным идентификаторами поль­зователя и группы для этого процесса. Для того, чтобы обеспечить наличие всей требуемой информа­ции о пользовательском процессе в выводе контроля, механизм контроля ядра всегда отслеживает определенные системные вызовы - так называемые обязательные системные вызовы. Они существенны для сопровождения состояния процесса. Например, системный вызов open(S) может задать относительное имя пути, такое, как ../newfile. Полное имя пути для файла зависит от текущего ката­лога процесса, который устанавливается по системному вызову chdir(S). Запись контроля, содержащую имя пути ../newfile, нель­зя подвергнуть осмысленной редукции, не зная заранее об имени текущего каталога. Такая же проблема связана и с системным вызовом close(S). Этот системный вызов для закрытия ранее открывавшегося файла требует в качестве аргумента только дескриптор файла. Контроль­ная запись close(S) потеряет смысл, если в ней не выводится имя закрываемого объекта. Но если имя пути не было запомнено при от­крытии файла, его невозможно предоставить для закрытия. По этим причинам некоторые системные вызовы объявляются обязательными и отслеживаются для всех процессов при включенном контроле. Список обязательных системных вызовов относительно не­велик; в него включены только те вызовы, которые обязательны для аккуратного сопровождения состояния процесса: chdir(S), chroot(S), open(S), close(S), fork(S), exit(S), exec(S), setuid(S), setgid(S), dup(S) и fcntl(S). . - 5-21 - Обязательный контроль не ограничивается только этой группой системных вызовов. Событие регистрации является единственной обязательной контрольной записью для надежных прикладных прог­рамм. Когда пользователь регистрируется в системе, в регистраци­онную запись заносится индикатор терминала, на котором была вы­полнена регистрация. Если один и тот же пользователь зарегистри­руется на нескольких терминалах в системе, его действия можно отслеживать вплоть до конкретного терминала. Типы событий контроля Каждая контрольная запись, независимо от того, чем вызвано ее появление, сопровождается отметкой о типе события. Для сис­темных вызовов пользовательского процесса тип события определя­ется механизмом контроля ядра, исходя из самого системного вызо­ва и из его результата, как уже говорилось выше. При контроле прикладной программы или подсистемы тип события устанавливает процесс, формирующий контрольную запись. Этот тип события не из­меняется ни устройством контроля, ни демоном контроля. Типы событий имеют важное значение, так как они классифици­руют события в системе, связанные с секретностью. И генерацией, и редукцией контрольных записей можно управлять, основываясь на типах событий. Например, если вы интересуетесь только пользова­телями, входящими в систему и выходящими из нее, можно задать этот тип события для сбора или редукции данных. Заметьте, что если вы запрашиваете выборочный сбор событий, то информация о событиях тех типов, которые вы исключили, не пишется в контроль­ный журнал и, разумеется, не подлежит последующей редукции. В подсистеме контроля имеется широкий диапазон типов собы­тий, нарушающих равновесие между грануляцией и соответствующими классами секретности. Поддерживаются следующие типы событий: * Запуск и останов системы * Вход в систему и выход из нее * Создание и прекращение процесса * Отображение объектов (например, файлов) в субъекты (нап­ример, процессы) * Сделать объект доступным * Сделать объект недоступным * Создание объекта * Модификация объекта * Удаление объекта * Связь между процессами * Изменения дискреционного доступа * Отказы дискреционного доступа * Недостаточная авторизация * Отказы ресурса * Действия Администратора системы/оператора * Действия авторизованной подсистемы . - 5-22 - * Действия секретной базы данных * События подсистемы контроля Вы можете, используя эти типы событий, выполнять выборочный сбор и редукцию данных контроля. Интерфейс подсистемы контроля позволяет составлять список типов событий либо для подсистемы контроля, либо для программы редукции данных. Подсистема контроля использует типы событий для того, чтобы определить, нужно ли заносить контрольную запись в контрольный журнал. Будучи Администратором контроля, вы полностью управляете отбором событий для контроля. Для управления контролем типов событий в подсистеме контро­ля имеется глобальная системная маска событий контроля, которая описана ниже. Подсистема контроля также обеспечивает маску типов событий для каждого процесса в системе (также описана ниже). Обе эти маски являются битовыми представлениями целочисленных значе­ний типов событий, подлежащих контролю. Системная маска событий контроля Системная маска событий является глобальной для подсистемы контроля. Ее можно установить с помощью sysadmsh и изменить в процессе контроля, если возникает необходимость выбрать другой набор событий. В системной маске событий каждому типу события соответствует один бит; он устанавливается равным единице, если контроль нужен. Это позволяет быстро проверять (с помощью бито­вых операций), подлежит ли контролю только что созданная запись. Подсистема контроля использует системную маску событий для вы­числения пользовательских масок, когда при регистрации в системе создается новый процесс. Пользовательская маска событий и маска событий процесса Вы можете отменить действие общесистемной маски событий для любого пользователя, установив пользовательскую маску событий в пользовательской строке защищенного пароля. Каждый процесс в системе обладает маской событий процесса, которая говорит систе­ме, что нужно контролировать для данного процесса. При регистра­ции пользователя программа login анализирует пользовательскую маску событий и устанавливает маску событий процесса для команд­ного процессора регистрации следующим образом. В пользовательской маске событий для каждого типа события контроля предусмотрено одно из трех значений: * всегда контролировать это событие * никогда не контролировать это событие * использовать системную маску событий контроля Для каждого типа события контроля маска контроля процесса устанавливается по пользовательской маске, если в ней указано, что данное событие контролируется всегда или никогда. В против- . - 5-23 - ном случае маска контроля процесса устанавливается по системной маске событий контроля. В большинстве случаев в пользовательской маске событий будет установлено третье значение для всех событий контроля, в результате чего для этого пользователя будут приме­няться системные параметры, принятые по умолчанию. Пользователь­скую маску можно использовать для того, чтобы увеличивать или уменьшать контролируемый объем информации о пользователях, кото­рым вы соответственно меньше или больше доверяете по сравнению с остальными. Эффективный системный контроль При использовании подсистемы контроля нужно следовать неко­торым правилам. Подсистема спроектирована так, чтобы обеспечить гибкую производительность и надежность и дать возможность соби­рать те данные контроля, какие вы желаете. Генерация контрольной записи поддерживает предварительную выборку событий контроля, идентификаторов пользователей и идентификаторов групп. Предвари­тельная выборка нужна, если вы по каким-то причинам хотите скон­центрироваться на каком-либо конкретном пользователе или группе пользователей (когда отдельные пользователи имеют обычай пытать­ся обращаться к файлам, к которым им не разрешен доступ). Для предварительной выборки можно также использовать типы событий - например, контроль только событий входа в систему и выхода из нее. Предварительная выборка, кроме того, дает экономию прост­ранства на диске, так как уменьшается число контрольных записей, заносимых подсистемой контроля в файлы сбора данных. Но в ис­пользовании предварительной выборки есть и отрицательная сторо­на. Если произошло нарушение секретности системы, и это событие или совершивший его пользователь не был выбран для контроля, то запись об этом действии будет утеряна. Поэтому следует быть более консервативными - не делать предварительную выборку событий контроля и пользователей/групп, а вместо этого осуществлять полный контроль. В итоге любое про­исшедшее событие, связанное с секретностью, будет зафиксировано в контрольном журнале. Недостатки полного контроля: он занимает много места на диске и увеличивает накладные расходы в системе. Вы можете комбинировать полный контроль с пост-выборкой, изучая только записи, представляющие интерес. Пост-выборка обес­печивает выборочный анализ контрольного журнала на основе типов событий, идентификаторов пользователей, идентификаторов групп и имен объектов, а также момента генерации записи. В общем, под­система контроля в сочетании с утилитой редукции/анализа данных даст вам с помощью предварительной выборки гибкость при выборе между системной производительностью и объемом пространства на диске, а также удобство полного контроля в сочетании с пост-вы­боркой. Административные аспекты Административное управление подсистемой контроля служит ключом к эффективному контролю. Если тщательно установить и ак­куратно пользоваться подсистемой контроля, она будет мощным средством в деле поддержания секретности системы и идентификации возникающих проблем. Эта подсистема спроектирована в довольно завершенном виде в терминах охвата событий контроля - как со стороны действий ядра, так и со стороны использования системных утилит. Она спроектирована также для обеспечения надежности и для минимизации влияния на производительность системы в целом. . - 5-24 - Насколько хорошо подсистема удовлетворяет вашим целям, за­висит от правильного административного управления системой. Вы управляете согласованием надежности и производительности, ис­пользуя параметры контроля. Неправильная установка может привес­ти к низкой производительности, потере данных контроля или ко всему сразу. Например, решающее значение имеет установка маски событий контроля для управления типами событий, контролируемыми подсистемой. Так, если предварительная выборка событий не вклю­чает события регистрации, то проникновение в систему через ком­мутируемую линию связи может остаться незамеченным. Поэтому очень важно тщательно рассмотреть следующие три аспекта: * задачи, связанные с производительностью * задачи, связанные с надежностью * требования к контрольному журналу Задачи, связанные с производительностью При оценке влияния подсистемы контроля на производитель­ность системы важно продумать, какие действия должна выполнять подсистема. Драйвер устройства подсистемы контроля - это главное место сбора контрольных записей из всевозможных источников; он отвечает за внесение этих записей в контрольный журнал. Драйвер выполняет запись в файл сбора данных, совместно используемый всеми процессами, контролируемыми в системе. Это напоминает сис­тему резервирования мест на самолетах, где множество клерков вы­полняют доступ к общей базе данных. Должны быть предусмотрены механизмы блокировки, чтобы не допустить смешивания контрольных записей и обеспечить совместимость базы данных. То же касается и файлов сбора данных подсистемы контроля. Механизм внутренней буферизации и стратегия записи (write­behind) пытаются минимизировать воздействие многократной однов­ременной записи на файлы сбора данных. Это позволяет подсистеме обслуживать контрольные записи от процессов и прикладных прог­рамм в то время, как параллельно идет запись в файлы сбора дан­ных. Вы можете настроить этот механизм, учитывая, как интенсивно используется буферизация и как часто идет запись в файл сбора данных. Задачи, связанные с надежностью Так же, как и производительность системы, важна надежность выдаваемого контрольного журнала. В традиционных системах UNIX нет возможности сохранить целостность файловой системы в резуль­тате фатального сбоя системы. Это вызвано тем фактом, что ввод- -вывод выполняется с помощью пула буферов, в которые запись (главным образом) ведется асинхронно. Так, изменения, внесенные в файлы, на самом деле могут оказаться не записанными на диск при фатальном сбое системы. Это грустно, так как события, приводящие к фатальному сбою системы, представляют для вас наибольший интерес с точки зрения контроля. Очень хотелось бы минимизировать какую бы то ни было потенциальную потерю данных из подсистемы контроля в результате . - 5-25 - фатального сбоя системы. Для этого подсистема контроля использу­ет механизм, называемый синхронным вводом-выводом, который вы­полняет немедленное обновление буферов сбора данных контроля и индексных дескрипторов файлов сбора данных, когда происходит их изменение. Это сводит к минимуму возможные потери данных в ре­зультате фатального сбоя системы. Существует прямая связь между степенью надежности данных и производительностью подсистемы контроля. Контрольные записи, ге­нерируемые механизмом контроля ядра, надежными прикладными прог­раммами и защищенными подсистемами, обычно имеют длину 40-60 байт. Если каждая запись пишется на диск синхронно, как только она передана подсистеме, результатом будет низкая производитель­ность; система ввода-вывода переполняется из-за высокой скорости генерации записей. Выход состоит в том, чтобы буферизовать запи­си и писать их в контрольный журнал вместе через назначенные ин­тервалы времени. Эти интервалы можно определить по истекшему времени или по пороговой величине накопленных данных. И здесь также выбор зависит от вас. Требования к контрольному журналу И, наконец, последнее, что важно для административного уп­равления подсистемой контроля, - определить, что именно нужно контролировать. Можно использовать возможности предварительной выборки при генерации записей, чтобы контрольный журнал скон­центрировался на одном или нескольких событиях. Например, систе­ма может использоваться всего лишь маленькой группой людей, а по ночам простаивать. Кроме того, в нерабочее время предоставля- ются несколько коммутируемых линий связи. Возможно, вас интере­сует только учет того, кто и когда пользуется системой. В этом случае предварительную выборку можно использовать только для от­слеживания событий входа в систему и выхода из нее. Попытки про­никновения в систему со стороны неавторизованных пользователей будут зафиксированы как неудачные попытки регистрации. Контроль можно также сосредоточить на конкретных пользова­телях или группах пользователей. Это позволит вам сконцентриро­ваться на лицах, подозреваемых в нарушении стратегии секретнос­ти. Чем меньше запрошено контроля, тем меньше подсистема контро­ля влияет на производительность системы. Полный контроль приво­дит к созданию пространной и подробной записи о системных собы­тиях, но он требует и больше ресурсов для работы. Однако чаще оказывается удобнее зарегистрировать события и использовать средства редукции, чтобы потом отбросить ненужные записи, чем отказаться от сбора записей, действительно необходимых для ана­лиза проблемы. Это решение зависит от степени секретности, кото­рую вы намерены соблюсти. Важно понять определение сессии контроля по отношению к подсистеме. Предполагается, что сессия соответствует интервалу времени с момента загрузки системы до момента ее выключения. Для сокращения объема записываемых в контрольный журнал данных в ка­честве одной из задач при проектировании подсистемы была уста­новлена минимизация размера каждой контрольной записи. Следова­тельно, состояние процесса определяется последовательностью контрольных записей, а не указывается целиком в каждой записи. . - 5-26 - При таком подходе экономия места и времени оказывается значи­тельной, но это требует аккуратного административного управления во избежание ловушек. Если отключить подсистему контроля во время работы системы, а затем вновь включить, будет создана новая сессия. Сессия опре­деляется как последовательность файлов сбора данных и уплотнен­ных файлов, содержащих контрольные записи, связанные с конкрет­ным интервалом времени. Это может привести к созданию двух (а возможно, и больше) наборов файлов контроля в одном жизненном цикле системы. Некоторые процессы, контролируемые во второй или последующей сессии, могут оказаться созданными во время первой сессии. Следовательно, сессия может не содержать все соответс­твующее состояние процесса, нужное для какого-либо процесса. В свою очередь, это может вызвать неполную редукцию записей. Это относится главным образом к именам файлов, причем как правило - только к относительным именам файлов (а не абсолютным). Этого можно избежать, если выключать контроль только после останова системы. Процедуры контроля В данном разделе описывается, как устанавливать, иницииро­вать, модифицировать и прекращать контроль системы. Доступ к каждой из этих функций осуществляется через sysadmsh. Выход на верхний уровень функций контроля производится выбором System->Audit; это следующие функции: Enable/Disable Инициирование и прекращение контроля Collection Выбор критерия контроля Формирование конфигурации подсистемы и управ­ление контролируемыми событиями и пользовате­лями. Кроме того, можно управлять параметрами установки, влияющими на производительность и надежность подсистемы и ее данные Report Редукция данных контроля и составление отчетов Создание и сохранение выборочных файлов ре­дукции, редукция сессий контроля с помощью файлов сбора данных и удаление сокращенных файлов после того, как они становятся ненуж­ными Files Сопровождение файла контрольных записей Проверка сессий контроля, накопленных в сис­теме, архивирование сессий контроля на ре­зервном носителе, восстановление ранее сохра­ненных сессий контроля, удаление ненужных сессий контроля, пуск и останов контроля по мере надобности . - 5-27 - Процедура контроля состоит из трех этапов, описанных в пос­ледующих разделах: 1. Установка схемы сбора данных 2. Включение контроля 3. Генерация контрольных отчетов Установка схемы сбора данных Чтобы задать, какие данные следует собирать и где их следу­ет хранить, сделайте в sysadmsh следующий выбор: System->Audit->Collection На экране появятся следующие элементы для выбора: Directories Каталоги файлов сбора данных контроля и уп­лотненных файлов Events Системная маска типов событий IDs Выбор контроля пользователя и группы Parameters Параметры подсистемы контроля Summary Распечатка статистики текущей сессии контроля Выберите, какую информацию вы хотите поставлять; каждый вы­бор описан в одном из последующих разделов. Информация о сборе данных, заданная вами, записывается в файл параметров. Система поставляется с файлом параметров, заданным по умолчанию, но вы должны модифицировать его, чтобы он удовлетворял вашим требова­ниям. Инициированная подсистема контролирует события в соответс­твии с содержимым файла параметров до тех пор, пока параметры не будут модифицированы, или до прекращения контроля, или до оста­нова системы. Заметим, что некоторые параметры можно модифициро­вать в ходе контроля, а другие действительны только в момент инициирования контроля. По мере описания очередной области кон­фигурации отмечаются статические и динамические величины. Каталоги контроля Файлы сбора данных, генерируемые подсистемой контроля, и уплотненные файлы, генерируемые демоном контроля, записываются в заданные вами каталоги. Сессия контроля может содержать файлы, записанные во множество различных каталогов. К концу сессии ос­таются только уплотненные файлы, так как файлы сбора данных уда­ляются подсистемой, когда они прочитаны демоном контроля. Вам не нужно отслеживать каталоги, в которые записываются файлы, пос­кольку эта информация имеется в журнальном файле сессии. Вы можете увеличить производительность системы, поместив каталоги контроля в файловую систему, расположенную на отдельном физическом устройстве от остальных файловых систем. Это уменьшит соперничество за ресурсы диска. Кроме того, контроль требует значительного пространства, даже с учетом уплотнения. Когда мес- . - 5-28 - та на диске становится мало, подсистема выдает предупреждение; если свободного пространства в файловой системе становится слиш­ком мало, то подсистема выключает контроль. По этой причине под­система и демон поддерживают несколько каталогов. При возникно­вении ошибки во время записи в каталог или при исчерпании места на диске подсистема и демон пытаются воспользоваться альтерна­тивными каталогами, чтобы продолжить работу. Каждое имя файла следует вводить с указанием абсолютного имени пути. Число каталогов, которые вы можете определить, ничем не ограничено. Если никакие каталоги не заданы, подсистема и де­мон создают все файлы в корневой файловой системе, используя за­резервированный каталог подсистемы контроля /tcb/audittmp. Такая установка файлов конфигурации контроля делается по умолчанию. Маска событий контроля Как уже говорилось в разделе "Типы событий контроля", име­ется некоторое число событий контроля, которые можно выбрать: Таблица 5.5
1   2   3   4   5   6   7   8   9   ...   36 